/******************************************************************
1. Write a  menu based program to implement a simple stack (static), 
 Implmenet functinos to add, delete and display the content of the stack 
 
**********************************************************************/
#include<stdio.h>
#include<stdlib.h>
#define size 5


void push(int s[],int *top,int ele)
{
   
   
   if(*top==size-1)
   {
        printf("stack overflow\n");
        return;
   }
   (*top)++;
   s[*top]=ele;
}

void pop(int s[],int*top)
{
 
     int dele;
     if(*top==-1)
     {
      
         printf("stack underflow\n");
         return;
     }
     printf("The element deleted is %d",s[*top]);
     (*top)--;
 }
 
 void display(int s[],int top)
 {
     int i;
     
    if(top==-1)
    {
        printf("stack underflow\n");
        return;
    }
    printf("stack contents are\n");
    for(i=0;i<=top;i++)
    {
        printf("%d\t",s[i]);
        
    }
 }
 
void main()
{
    
      int s[size],choice,ele,top=-1,flag=0;
      
      for(;;)
      {
          printf("\n1:push\t 2:pop\n");
          printf("3:display\t 4:exit\n");
          scanf("%d",&choice);
          switch(choice)
          {
               
                  case 1:printf("Enter the element to be inserted\n");
                         scanf("%d",&ele);
                         push(s,&top,ele);
                         break;
                         
                 case 2:pop(s,&top);
                        break;
                        
                 case 3:display(s,top);
                        break;
                       
                 case 4:exit(0);
           }
        }   
} 
/******************************************************************
 
 2. Write a  menu based program to implement dynamic stack, 
 a stack that never gets filled( until stack segment is full)
 Implmenet functinos to add, delete and display the content of the stack 
 
 Hint: start with intial capacity 1/2 
        use  malloc, realloc
 
 **********************************************************************/
#include <stdio.h>
#include <stdlib.h>
int* stackfull(int *stack,float *cap)
{
    printf("Stack is getting doubled\n");
    stack=(int*)realloc(stack,2*(*cap)*sizeof(int));
    (*cap)=(*cap)*2;
    return stack;
}

int* push(int *stack,int *top,float *cap,int item)
{
    if(*top>=(*cap-1))
    {
      stack=stackfull(stack,cap);
    }
    (*top)++;
    *(stack+(*top))=item;
    return stack;

}


void pop(int *stack,int *top)
{
    int item;
    if(*top==-1)
    {
        printf("Stack underflow\n");
        return;
    }
    item=stack[*top];
    printf("The item deleted is %d",item);
    (*top)--;

}

void display(int *stack,int top)
{
    if(top==-1)
    {
        printf("Stack underflow\n");
        return;
    }
    printf("The elements are\n");
    for(int i=top;i>=0;i--)
    {
        printf("%d\t",stack[i]);
    }
}

int main()
{
    int *stack,ch;
    int item,top=-1;
    float cap=0.5;
    stack=(int*)malloc(cap*sizeof(int));
    if(stack==NULL)
    {
        printf("Insufficient memory\n");
        return 0;
    }
    for(;;)
    {
        printf("press 1.add\t 2.delete\t 3.display\t 4.exit");
        printf("\nEnter your choice\n");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1:printf("Enter the element to be inserted\n");
                    scanf("%d",&item);
                    stack=push(stack,&top,&cap,item);
                    break;
            case 2:pop(stack,&top);
                    break;
            case 3:display(stack,top);
                break;
            case 4: exit(0);
        }
    }



}
/******************************************************************
 3. Write a  menu based program to implement a simple/ linear queue (queue), 
 Implmenet functinos to add, delete and display the content of the stack 
 discuss the limitation of this simple linear queue
 
 **********************************************************************/
#include <stdio.h>
#include <stdlib.h>
#define max 5
void insert(int q[],int *r,int item)
{
    if(*r==(max-1))
    {
        printf("Queue full\n");
        return;
    }
    (*r)++;
    q[*r]=item;
}

void delet(int q[],int *f,int *r)
{
    if(*f>*r)
    {
        printf("Queue empty\n");
        return;
    }
    printf("The item deleted is %d\n",q[*f]);
    (*f)++;
}

void display(int q[],int f,int r)
{
    if(f>r)
    {
        printf("Queue empty\n");
        return;
    }
    for(int i=f;i<=r;i++)
    {
        printf("%d\t",q[i]);
    }
}

int main()
{
    int q[max],f=0,r=-1;
    int ch,item;
    for(;;)
    {
        printf("press 1.add\t 2.delete\t 3.display\t 4.exit");
        printf("\nEnter your choice\n");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1:printf("enter the element to be inserted\n");
                   scanf("%d",&item);
                   insert(q,&r,item);
                   break;
            case 2:delet(q,&f,&r);
                   break;
            case 3:display(q,f,r);
                   break;
            case 4: exit(0);
        }
    }
}
/**********************************************************************************
4. Demonstrate the working of stack using a book database example.
 Make use of the function template given in the program and complete the code.
 Analyse the following 
   a. parameter passing in structures
   b. assigning strucure members with just assignment operators 
 /**********************************************************************************/
#include <stdio.h>
 #include<stdlib.h>
 #include<string.h>
#define SIZE 20
#define TRUE 1
#define FALSE 0
struct book
{
    int book_id;
    char title[10];
    char author[10];
    float price;
    int no_pages;
};
void push(struct book, int *, struct book[]);
struct book  pop(int *, struct book []);
struct book peep(int , struct book []);
void display(int , struct book []);
int stackfull(int *);
int stackempty(int *);
int stackfull(int *tos)
{
    if(*tos==(SIZE-1))
      return TRUE;
    return FALSE;
}
int stackempty(int *tos)
{
    if(*tos==-1)
      return TRUE;
    return FALSE;
}

void push(struct book ele, int *tos, struct book stack[])
{
    (*tos)++;
    stack[*tos].book_id=ele.book_id;
    strcpy(stack[*tos].title,ele.title);
    strcpy(stack[*tos].author,ele.author);
    stack[*tos].price=ele.price;
    stack[*tos].no_pages=ele.no_pages;

}

struct book pop(int *tos, struct book stack[])
{
     struct book ele;
     ele=stack[*tos];
     (*tos)--;
     return ele;

}
struct book peep(int tos,struct book stack[])
{
    return stack[tos];
}

void display(int tos, struct book stack[])
{
   printf("**************\n");
   printf("Bppk_Id\t Title\t Author\t Price\t No_pages\n");
   printf("**************\n");
   for (int i=tos; i>=0; i--)
    {
        printf("%d\t %s\t %s\t %.2f\t %d\n", stack[i].book_id, stack[i].title, stack[i].author, stack[i].price, stack[i].no_pages);
    }
}
int main()
{
    struct book stack[SIZE], ele;
    int  choice, item;
    int top=-1;
    struct book pop_item, peep_item;
    for(;;)
    {
        printf("\tEnter 1 for push, 2 for pop  3 for pip and 4 for display 5 for exit\n");
        scanf("%d", &choice);
        switch(choice)
        {
            case 1: if(stackfull(&top))
                      {
                          printf("The Stack is full\n");
                          break;
                      }
                   printf("Enter the book id title, author name, price and number of pages in order\n");
                    scanf("%d%s%s%f%d", &ele.book_id, ele.title, ele. author, &ele.price, &ele.no_pages);
                    push(ele,&top,stack);
                    break;
             case 2: if (stackempty(&top))
                     {
                          printf(" The stack is empty \n");
                          break;
                     }
                     pop_item=pop(&top, stack);
                     printf("The detailes of popped record are\n");
                     printf("%d\t %s\t %s\t %.2f\t %d\n", pop_item.book_id, pop_item.title, pop_item.author, pop_item.price, pop_item.no_pages);

                     break;
            case 3: if (stackempty(&top))
                     {
                          printf(" The stack is empty \n");
                          break;
                     }
                     peep_item=peep(top, stack);
                     printf("The item at the top of the stack is\n");
                     printf("%d\t %s\t %s\t %.2f\t %d\n", peep_item.book_id, peep_item.title, peep_item.author, peep_item.price, peep_item.no_pages);
                     break;
            case 4 : if (stackempty(&top))
                     {
                          printf(" The stack is empty \n");
                          break;
                     }
                     printf("The content of the stack are \n");
                     display(top, stack);
                     break;
            case 5:exit(0);
            default: printf("Enter a valid choice\n");
        }


    }

    return 0;
}
/**********************************************************************************
5. Program that splits an at the largest element 
example if the input array is 22,44,133,11,66,99,88
then the output : 
the largest is 133                                                                                                  
elements before largest                                                                                             
22      44                                                                                                          
 elements after largest                                                                                             
11      66      99      88     

/**********************************************************************************
#include <stdio.h>
#include <stdlib.h>

int main()

{
    int arr[20],max,n,ind;
    printf("Enter the number of elements\n");
    scanf("%d",&n);
    printf("Enter the array elements\n");
    for(int i=0;i<n;i++)
        scanf("%d",&arr[i]);
    max=arr[0];
    ind=0;
    for(int i=0;i<n;i++)
    {
        if(arr[i]>max)
        {
            max=arr[i];
            ind=i;
        }

    }
    printf("The largest element is %d\n",max);
    printf("elements before largest are\n");
    for(int j=0;j<ind;j++)
    {
        printf("%d\t",arr[j]);
    }
    printf("\nElements after largest\n");
    for(int j=ind+1;j<n;j++)
    {
        printf("%d\t",arr[j]);
    }

}
